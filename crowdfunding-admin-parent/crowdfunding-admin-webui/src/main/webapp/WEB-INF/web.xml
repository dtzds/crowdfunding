<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    
    <welcome-file-list>
        <welcome-file>/index.jsp</welcome-file>
    </welcome-file-list>

    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath*:applicationContext.xml,classpath*:spring-tx.xml</param-value>
    </context-param>

    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <!-- 解决post请求乱码问题
    在所有的filter之前执行
        原因：request.setCharacterEncoding(encoding)必须在request.getParameter()之前
            response.setCharacterEncoding(encoding)必须在response.getWriter()之前
     -->
    <filter>
        <filter-name>encoding</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
        <init-param>
            <!-- 强制请求设置字符集 -->
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <!-- 强制响应设置字符集 -->
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encoding</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- 前端控制器 -->
    <servlet>
        <servlet-name>spring-mvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath*:spring-mvc.xml</param-value>
        </init-param>
        <!-- servlet默认生命周期中，创建对象是在第一次接收到请求时；
            而在DispathcherServlet创建对象后有大量的框架 初始化 工作，不适合在第一次请求是来做
            设置load-on-startup就是为了让DispathcherServlet在web应用启动时创建对象，初始化
        -->
        <load-on-startup>1</load-on-startup>
    </servlet>
    
    <servlet-mapping>
        <servlet-name>spring-mvc</servlet-name>
        <!-- 方式一：
            <url-pattern>/*</url-pattern>
            拦截所有的请求
        -->
        <!-- 方式二：配置请求扩展名
            <url-pattern>/*.html</url-pattern>
            优点1：css,js,png等静态资源不用经过spring-mvc，不需要特殊处理
            优点2：可以实现伪静态效果，表面上看是一个html的静态文件，实际上是经过java代码运算的
                   伪静态作用1：给黑客入侵增加难度
                   伪静态作用2：有利于SEO优化
            缺点：不符合Restful风格
         -->
        <url-pattern>*.html</url-pattern>
        <!-- 为什么要再配置一个json数据
            如果一个Ajax请求的扩展名是html，但实际服务器给浏览器返回的数据是json数据，二者不匹配，会报406的错误
        -->
        <url-pattern>*.json</url-pattern>
    </servlet-mapping>

</web-app>